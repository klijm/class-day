呵呵,学到时至今日,才有点明白;  哈哈哈哈  够可以
html+css+js  是干什么的?
html+css;  只是构建一个结构和样子
js  拿页面中的结构的初始值;做什么判断;  俗称默认状态;
    DOM,生成节点;
    例子:
            DOM创建一个div,随你创建;  但是以=>>我给哪个css;为结果;
            或者是创建一个空字符串;  生成这些结构;  但是放哪些内容;(数据)  循环着添加;
    终于明白一点;
        创建页面结构;再好看也只是一个体验的效果;(花瓶作用);当你点击哪个元素,该元素对应的做某些事而已;
        在举个例子,当你浏览页面时:好比说;注册;登录;进入某个页面;或者留言版;某些操作时;你要看新闻时;
        这些数据都是请求后台,请求过来的;
            明白了?在页面中生成而已;  而前端要做的事;  就是把这些数据处理好;  最终呈现在用户面前;
        移动端/相应式/pc端/ES6/3D/canvas/框架/JQ慢慢来;
            除了框架,其他的会操作,熟练即可;  跟github会操作即可;
        慢慢前端路;长路慢慢;


        数据的渲染,还有数据的处理(增删改查)





            


DOM尽量少操作;
    页面中元素的属性,你一操作;改变;   整个DOM就会重绘;  很麻烦的;  所以说少操作DOM;



    框架:改变该元素的默认状态;












2018.1.3
    复习了所学的事件;
        on...


        ****事件多去复习下;
            关于冒泡,
                1 阻止冒泡;  
                2 包含关系时,不要同一事件;
                3 使用onmouse,onmouse  即可;
            什么是冒泡???




事件对象应用;
    1   拖拽
        有一个定位元素;拖拽就是拖着跑;
        3大事件:按下,移动,抬起;
            keydown  => 键盘按下
            mousedoen  =>  鼠标按下         
            **********************************分清;
    原理:
        按下时;  
            1)通过事件对象得知,按下时的坐标;  ev.pageX;
            2)要移动的位置???    移动的位置 - (减去) 按下的位置
                ****有个坑;   自己在好好想想!
                很好想;  原理也简单;  这只是第一种方法;
            
        第二套:
            1)按下时,拿到按下的位置到元素的边的距离;
                按下时,通过事件对象,得到这个按下的值,并且减去这个盒子边框到左边框的距离;  就是为了得到  按下的坐标到~这个元素的内边框的距离;
                得到这个值,就爽了;
            2)移动的时,通过event得到移动的距离;得到这个坐标  -   (减去)  按下时得到的边框距离;
            3)  ok 就这样;


    需要注意的点:
        1 move的太快;就需要在document上move;
        2 抬起的时候,也要在document上up;  (不然move出时,再move回document时,会发现没解绑;)
        3 move和up需要全部释放掉;  全部为 null;  再up时把up事件也清除;这样就不会导致释放up的时候,多次触发再up时事件中的代码;
        4 有一堆文字;并且选中所有文字;   就拖拽不了了; 什么情况下出现???   图文环绕!!!拖拽图片, 出bug;
          再down时,清除一下默认样式;  return false;
        
    总结:  再div身上按下,但是再document上移动;  谢谢;






仿window拖拽;
    需求:拖出来,应该有一个分身;
    分身就创建;  或者clone一下;
    呵呵,明白了,  
        在原有的div上按下;并且clone;  颜色变浅;  厉害了; 让这个clone的这个拖拽;
        抬起时,让分身死掉,真身过来;


回放小例子






碰撞
    解法是逆向思维;
    如何检测碰撞???  有两个盒子;   盒子A,盒子B;   盒子A是固定的;拖拽盒子B去碰撞盒子A;
    如何的一个逆向思维?
        B的right是不是小于或者等于A的left???
    还是比较好理解的;


