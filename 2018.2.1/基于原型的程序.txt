什么是基于原型的程序???
在JS源码 : 系统对象也是基于对象下面的方法和属性;

例子 : 系统中自带的arr,sort() 方法;
也是基于arr对象;中的原型里面的;

arr = [1,2,3]
如果修改了,arr对象下原型的  push方法; 
其实就是修改了push方法;push方法没有了;

有点意思;


包装对象???
{},[],function   能加属性和方法;
对象身上才能加属性和方法,
如果是null,undefined身上加属性和方法,才会报错;
别的数据类型都是undefined;

问题来了;
	既然不能加属性和方法; 
	那为什么会有str.length  substr 这些东西呢?

包装对象;
当去奥用简单类型的属性和方法的时候,系统会偷偷的把这个简单类型转成对象类型;调用该对象下的属性和方法,使用之后,自动销毁;这个过程就称为包装对象;;;;

简单类型的实例化对象上的length只能读不能写;

什么叫包装对象?
	就是在调用简单类型的时候,系统会偷偷把这个简单类型转成对象;并且调用该对象下的属性和方法;;;





*****  定时器中的this  指向window;
*****  如果还包括一个箭头函数  指向老爹函数;
箭头函数   指向   老爹函数;  ok????
这个才是指向老爹;



只要遇到有函数的情况下(也包括函数套函数);
this非常容易被修改;

"use strict"   //  undefined
在严格模式下,this  是undefined   
 



包装对象的含义 很简单;





对象的继承  ******这个是重点;
什么叫继承???
程序源于生活 =>   子继承父;

********子级有自己的特征,也有自己的一些特征;
JS有几种继承方式?	
	原型继承  (对象继承)  (原型继承用的最多,性能最好;)
	类式继承
	拷贝继承



为什么要继承? 继承的好处在哪里??
页面中两个div;
	需求:div1,不限制范围;
	     div2,限制范围;
怎么做???
两个函数,函数1(不限制)函数2(限制)
这个方法,太繁琐;麻烦;有100个不同需求,就100个函数???

这里就用到继承;
先说第一种 : 拷贝继承;
	拷贝继承的第一步;
	属性继承 : 
	  类式继承 : 
	  直接调用第一个函数即可;  (父类)
 	  但是第一个函数 使用new  这个this指向实例化对象
	  但是 this会改变成 window;
	  所以改变一下;   
	  三种方法;
		call
	方法继承 : 
		不能直接把父类的原型等于子级的原型;
		通过浅拷贝	
		高版本不吃  assgin
		低版本还是用  for in   浅拷贝;好一点;
	
浅拷贝 ???
方法很多
for,map,concat  都可以   返回的都是一个新数组;	
	 	  


总结:



第二种 : 原型继承??    ****性能是最高的;
	属性继承
	function(id){
	Drag.call(this,id)
}   //  属性继承完成;
	
	方法继承????
		其实就一句话;
		实例化对象如果没有,就会到构造函数的原型下查找;
		(实例化对象没有方法,或属性  就会去构造函数的原型下查找)

****  实例化对象是一个对象(空间)
****  构造函数的原型也是一个对象(另一个空间)
	实例化对象  !=  构造函数的原型;;
****  但是实例化对象的方法   会去构造函数的原型下 查找;;;
	哈哈哈哈哈

*****
所以说这里  需要一个炮灰函数   去转一下;
回家看看   图   看看  练习  就会了;;;

*******   但是如果只用new 那么Drog会调用一次;但是功能是一样的;









ES6 : 

for of???
也是一种循环;有一定的规则在里面;
	keys()   [key]
	entries()  [key,value]
只要有遍历器,   就可以使用for of   这个循环;
数组没有values()   上面的两个是   数组的方法


*(********
字符串没有  这三个方法;
元素身上三个都有;
数组没有   values() 方法;



对象???
对象没有 接口??
但是可以遍历吗?  可以==>自己写一个接口;
  



https://study.miaov.com/v_show/620






深度克隆???
一个一维数组;  for of   for循环  即可;
如果是二维数组;  就不好使了;
arr2 = JSON.parse(JSON.stringify(arr))
先转字符串(不管你是几维数组,全部转成字符串;)然后在变成变回来;;




深度克隆;;;  就是一个函数封装;  传参多谢几次就好了;



toString   的深度讲解;   有意思了;
如何判断当前的这个   是什么???   什么意思???
JS 如何判断数据类型和数组类型????

如何判断你是不是一个数组??????
这个有意思了;   哈哈哈哈


两个函数,  深度拷贝;toString函数封装;  有意思;  很有意思;;
一个是深度拷贝,一个是判断当前是什么数据类型;


object.create  这个好玩;**********************




对一个知识点比较模糊,  MDN查


对象你不知道的秘密;
let obj = {
	set(){
		
	},
	get(){
	
	}
}


get  在你获取对象中的值的时候;
set  在你设置对象中的值的时候;  也就是改变对象中的时候










